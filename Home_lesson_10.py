"""
Home Work 10

Задания для самоподготовки
1. Напишите две функции создания списка из четных чисел от 0 до N (N – аргумент функции):

[0, 2, 4, …, N]

с помощью метода append и с помощью инструмента list comprehensions (генератор списков).
Через декоратор определите время работы этих функций.

2. Напишите декоратор для кэширования результатов работы функции вычисления квадратного корня
положительного целочисленного значения x. То есть, при повторном вызове функции (через декоратор)
с одним и тем же аргументом, результат должен браться из кэша, а не вычисляться заново.
(Подсказка: здесь следует использовать замыкание для хранения кэша).

"""

# ++++++++++++++++++++++++++++ Задание 1 +++++++++++++++++++++++++++++++++++++
'''
1. Напишите две функции создания списка из четных чисел от 0 до N (N – аргумент функции):

[0, 2, 4, …, N]

с помощью метода append и с помощью инструмента list comprehensions (генератор списков).
Через декоратор определите время работы этих функций.
'''
print('++++++++++++++++++++++++++++ Задание 1 +++++++++++++++++++++++++++++++++++++' + '\n')
import time # Импортируем библиотеку time

user_num = int(input("Введите пожалуйста число: ")) #Просим пользователя ввести данные

def testTime(fn):
    """
    функция обертка (Декоратор)
    :param fn: передается любая функция
    :return: возвращает вложенную функцию
    """
    def wrapper(*args, **kwargs):
        """
        Функция вычисляет время работы переданной функции
        :param args: Любое количество позиционных аргументов
        :param kwargs: Любое количество именованных аргументов
        :return: возвращает результат вычислений
        """
        start = time.time() # Сохраняем текущее время (время запуска переданной функции)
        res = fn(*args, **kwargs)   # Запускаем переданную функцию
        end = time.time() - start   # Из текущего времени вычитаем время начала запуска работы переданной функции
        print(f"Время работы: {end} сек") # Выводим полученный результат
        return res  # Возвращаем полученный результат
    return wrapper


@testTime   # Эта запись обозначает что тут используется декоратор с именем testTime
def lst_app(num):
    """
    Функция создания списка из четных чисел.
    Работает через append
    :param num: число введенное пользователем, конечное значения списка
    :return: Возвращает список четных чисел
    """
    lst_def_one = []
    for val in range(num+1):
        if val % 2 == 0:
            lst_def_one.append(val)
    return lst_def_one

@testTime
def lst_comp(num):
    """
        Функция создания списка из четных чисел.
        Работает через list comprehensions
        :param num: число введенное пользователем, конечное значения списка
        :return: Возвращает список четных чисел
        """
    lst_def_two = [val for val in range(num + 1) if val % 2 == 0]  # Тут подразумевается выполнения всех действий в одну строку
    '''
        мы создаём список и сразу вычисляем каждое число которое соответствует условию.
        где:
        val число которое сохраняется при соответствии условию
        цикл for перебирает все число от 0 до num (числа заданным пользователем) + 1 чтобы заданное число тоже входило в список,
        если оно положительное.
    '''
    return lst_def_two  # Возвращаем результат


# Расспечатываем результат работы функции.
print(lst_app(user_num))
print(lst_comp(user_num))

# ++++++++++++++++++++++++++++ Задание 2 +++++++++++++++++++++++++++++++++++++
'''
2. Напишите декоратор для кэширования результатов работы функции вычисления квадратного корня
положительного целочисленного значения x. То есть, при повторном вызове функции (через декоратор)
с одним и тем же аргументом, результат должен браться из кэша, а не вычисляться заново.
(Подсказка: здесь следует использовать замыкание для хранения кэша).
'''
print('++++++++++++++++++++++++++++ Задание 2 +++++++++++++++++++++++++++++++++++++' + '\n')

def myCash(fn):
    """
    функция обертка (Декоратор)
    :param fn: передается любая функция
    :return: возвращает вложенную функцию
    """
    num_cash = dict()   # Создаем словарь для хранения значения и результата вычисления
    def inCash(n, *args):
        """
        Функция вычисляет время работы переданной функции
        :param args: Любое количество позиционных аргументов
        :param kwargs: Любое количество именованных аргументов
        :return: возвращает результат вычислений
        """
        if n in num_cash:   # Проверяем значение если оно присутствует в словаре тогда возвращаем значение вычисления
            return num_cash[n]
        else:
            num_cash[n] = fn(n, *args)  # иначе записываем значение в список значение переданное пользователем и результат расчёта
            return num_cash[n]
    return inCash


@myCash
def squad(num):
    """
    Функции вычисления квадратного корня
    положительного целочисленного значения x
    :param num:
    :return:
    """
    if num < 0:     # Проверка значения отрицательное оно или нет.
        print("Вы ввели отрицательное занчение")
    else:
        return num ** 2


def mainFunc(fn):
    """
    Функция которая позволяет ввести число пользователю
    имеется цикл который позволяет вводить число не один раз
    и вызывает функцию расчета квадратного корня.
    :return:
    """
    print("Программа для вычисление квадратного корня")
    select = 'y'
    while select == 'y':    # Селектор выбора если y то цикл запускается еще раз
        number = int(input("Введите число: "))  # Ввод числа для которого необходимо рассчитать квадратный корень
        print(fn(number))
        select = input("Хотите продолжить? (y/n): ").lower()    # Повторить цикл или прекратить работу программы.


mainFunc(squad)
