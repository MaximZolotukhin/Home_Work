"""
Home Work 11

Пусть дан текст:

t = \"""Генератор – это итератор, элементы которого
можно перебирать (итерировать) только один раз.
Итератор – это объект, который поддерживает функцию next()
для перехода к следующему элементу коллекции.\"""

Написать функцию-генератор для выделения слов из этого текста (слова разделяются пробелом, либо переносом строки ‘\n’).
Список всех слов при этом в функции не создавать.

"""

# ++++++++++++++++++++++++++++ Задание 1 +++++++++++++++++++++++++++++++++++++
'''
Пусть дан текст:

t = """Генератор – это итератор, элементы которого
можно перебирать (итерировать) только один раз.
Итератор – это объект, который поддерживает функцию next()
для перехода к следующему элементу коллекции."""

Написать функцию-генератор для выделения слов из этого текста (слова разделяются пробелом, либо переносом строки ‘\n’).
Список всех слов при этом в функции не создавать.
'''
# print('++++++++++++++++++++++++++++ Задание 1 +++++++++++++++++++++++++++++++++++++' + '\n')
import re

rep = re.compile("[^a-zA-Zа-яА-я]")     # Удаляем все символы место букв

text = """Генератор – это итератор, элементы которого
можно перебирать (итерировать) только один раз.
Итератор – это объект, который поддерживает функцию next()
для перехода к следующему элементу коллекции."""

def word_line(string_line): # Функция итератор для разделения строки на слова
    text_on_word = rep.sub(" ", string_line)    # Все символе заменяет на пробелы
    word: str = ''                              # Создаем пустую строку
    for x in text_on_word:                      # Перебираем посимвольно
        if x.isalpha():                         # Если буква сохраняем в переменную word
            word += x
        else:                                   # Иначе возвращаем значение, и удаляем все из переменной word.
            yield word
            word = ''

list_word = word_line(text)                     # создаем итерируемый объект

for x in list_word:                             # Перебираем итерируемый объект
    if x.isspace():                             # Если пробел тогда ни чего не печатаем
        print(sep='')
    elif x.isalpha():                           # Иначе печатаем словл
        print(x)


# Одно из возможных решений задачи.
# from typing import Tuple
#
# def get_words(text: str, split_by: Tuple[str] = ("\n", " ")) -> Tuple[str]:
#     return re.split(f"[{''.join(split_by)}]", text)
#
#
# for word in get_words(text):
#     print(word, end='\n')
